const path=require("path"),fs=require("fs/promises"),sharp=require("sharp"),THUMBNAIL_PREFIX="thumb_",RUNTIME_SCRIPT="\n  document.addEventListener('DOMContentLoaded', function() {\n    function loadOriginalImages() {\n      const images = document.querySelectorAll('img');\n      \n      images.forEach(img => {\n        const src = img.src;\n        // 检查是否是缩略图路径\n        if (!src.includes('thumb_')) return;\n        \n        // 已经加载过的不再处理\n        if (img.dataset.loaded === 'true') return;\n        \n        // 获取原图路径（去掉thumb_前缀）\n        const originalSrc = src.replace(/thumb_/, '');\n        \n        // 创建原图加载\n        const tempImg = new Image();\n        tempImg.onload = function() {\n          img.style.opacity = 0;\n          img.src = originalSrc;\n          img.dataset.loaded = 'true';\n          setTimeout(() => {\n            img.style.opacity = 1;\n          }, 50);\n        };\n        tempImg.onerror = function() {\n          console.error('Failed to load image:', originalSrc);\n          img.style.filter = 'none';\n        };\n        tempImg.src = originalSrc;\n        \n        // 添加过渡效果\n        img.style.transition = 'opacity 0.3s ease, filter 0.3s ease';\n        img.style.filter = 'blur(5px)';\n      });\n    }\n    \n    // 处理CSS背景图\n    function loadOriginalBackgrounds() {\n      const elements = document.querySelectorAll('*');\n      elements.forEach(el => {\n        if (el.dataset.bgLoaded === 'true') return;\n        \n        const bgImage = window.getComputedStyle(el).backgroundImage;\n        if (!bgImage.includes('thumb_')) return;\n        \n        const urlMatch = bgImage.match(/url\\([\"']?(.*?)[\"']?\\)/i);\n        if (!urlMatch) return;\n        \n        const thumbPath = urlMatch[1];\n        const originalBg = thumbPath.replace(/thumb_/, '');\n        \n        const tempImg = new Image();\n        tempImg.onload = function() {\n          el.style.backgroundImage = bgImage.replace(thumbPath, originalBg);\n          el.dataset.bgLoaded = 'true';\n        };\n        tempImg.onerror = function() {\n          console.error('Failed to load background image:', originalBg);\n        };\n        tempImg.src = originalBg;\n      });\n    }\n\n    // 初始加载\n    loadOriginalImages();\n    loadOriginalBackgrounds();\n    \n    // 监听动态添加的内容\n    const observer = new MutationObserver(function(mutations) {\n      mutations.forEach(function(mutation) {\n        if (mutation.addedNodes.length) {\n          loadOriginalImages();\n          loadOriginalBackgrounds();\n        }\n      });\n    });\n    \n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  });\n";function thumbnailLoading(n={}){const e={quality:30,width:50,height:null,skipSmallImages:!0,minSizeToResize:100,format:"auto",blurAmount:5,transitionDuration:"0.3s",...n};return{name:"vite-plugin-image-thumbnail",async generateBundle(n,t){const a=[];for(const[n,i]of Object.entries(t))/\.(jpg|png|jpeg|webp|avif|gif)$/i.test(n)&&a.push((async()=>{try{const t="asset"===i.type?i.source:await fs.readFile(i.fileName),a=await sharp(t).metadata();if(e.skipSmallImages&&a.width<=e.minSizeToResize&&a.height<=e.minSizeToResize)return;const r="thumb_"+path.basename(n),o=path.join(path.dirname(n),r);let s=sharp(t).resize({width:e.width,height:e.height,fit:"inside",withoutEnlargement:!0});switch(e.format){case"png":s=s.png({quality:e.quality});break;case"webp":s=s.webp({quality:e.quality});break;case"jpeg":s=s.jpeg({quality:e.quality});break;default:s=n.toLowerCase().endsWith(".png")?s.png({quality:e.quality}):n.toLowerCase().endsWith(".webp")?s.webp({quality:e.quality}):s.jpeg({quality:e.quality})}this.emitFile({type:"asset",fileName:o,source:await s.toBuffer()})}catch(e){console.error(`Failed to generate thumbnail for ${n}:`,e)}})());await Promise.all(a)},renderChunk:n=>n.replace(/(const\s+\w+\s*=\s*["'])(.*?\.(jpg|png|jpeg|webp|avif|gif))(["'])/gi,(n,e,t,a,i)=>{const r=function(n){const e=path.basename(n),t=path.dirname(n);return path.join(t,"thumb_"+e)}(t);return`${e}${r}${i}`}),transformIndexHtml:n=>({html:n,tags:[{tag:"script",injectTo:"body",children:RUNTIME_SCRIPT.replace(/'blur\(5px\)'/,`'blur(${e.blurAmount}px)'`).replace(/0\.3s/g,e.transitionDuration)}]})}}module.exports=thumbnailLoading;