const path=require("path"),fs=require("fs/promises"),sharp=require("sharp"),THUMBNAIL_PREFIX="thumb_",RUNTIME_SCRIPT="\n  document.addEventListener('DOMContentLoaded', function() {\n    function loadOriginalImages() {\n      const images = document.querySelectorAll('img');\n      \n      images.forEach(img => {\n        const src = img.src;\n        // 检查是否是缩略图路径\n        if (!src.includes('thumb_')) return;\n        \n        // 已经加载过的不再处理\n        if (img.dataset.loaded === 'true') return;\n        \n        // 获取原图路径（去掉thumb_前缀）\n        const originalSrc = src.replace(/thumb_/, '');\n        \n        // 创建原图加载\n        const tempImg = new Image();\n        tempImg.onload = function() {\n          img.src = originalSrc;\n          img.dataset.loaded = 'true';\n          img.style.opacity = 1;\n        };\n        tempImg.onerror = function() {\n          console.error('Failed to load image:', originalSrc);\n        };\n        tempImg.src = originalSrc;\n        \n        // 添加过渡效果\n        img.style.transition = 'filter 0.3s ease'; // 设置过渡\n        img.style.filter = 'blur(5px)'; // 模糊\n        img.style.filter = 'blur(0)'; // 取消模糊\n      });\n    }\n    \n    // 新增：处理CSS背景图\n    const elements = document.querySelectorAll('*');\n    elements.forEach(el => {\n      const bgImage = window.getComputedStyle(el).backgroundImage;\n      if (bgImage.includes('thumb_')) {\n        const originalBg = bgImage.replace(/thumb_/, '');\n        const tempImg = new Image();\n        tempImg.onload = function() {\n        el.style.backgroundImage = originalBg;\n        el.dataset.bgLoaded = 'true';\n        };\n        tempImg.src = originalBg.match(/url([\"']?(.*?)[\"']?)/)[1];\n      }\n    });\n\n    // 初始加载\n    loadOriginalImages();\n    \n    // 监听动态添加的图片\n    const observer = new MutationObserver(function(mutations) {\n      mutations.forEach(function(mutation) {\n        if (mutation.addedNodes.length) {\n          loadOriginalImages();\n        }\n      });\n    });\n    \n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  });\n";function lazyThumbnail(n={quality:30,width:50}){return{name:"vite-plugin-image-thumbnail",async generateBundle(e,t){const a=[];for(const[e,r]of Object.entries(t))/\.(jpg|png|jpeg|webp)$/i.test(e)&&a.push((async()=>{try{const t="asset"===r.type?r.source:await fs.readFile(r.fileName),a="thumb_"+path.basename(e),i=path.dirname(e)+"/"+a;this.emitFile({type:"asset",fileName:i,source:await sharp(t).resize(n.width).jpeg({quality:n.quality}).toBuffer()})}catch(n){console.error(`Failed to generate thumbnail for ${e}:`,n)}})());await Promise.all(a)},renderChunk:n=>n.replace(/(const\s+\w+\s*=\s*["'])(.*?\.(jpg|png|jpeg|webp))(["'])/gi,(n,e,t,a,r)=>{const i=function(n){const e=path.basename(n),t=path.dirname(n);return("."===t?"":t+"/")+"thumb_"+e}(t);return`${e}${i}${r}`}),transformIndexHtml:n=>({html:n,tags:[{tag:"script",injectTo:"body",children:RUNTIME_SCRIPT}]})}}module.exports=lazyThumbnail;