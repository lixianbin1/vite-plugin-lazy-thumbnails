/*!
 * vite-plugin-lazy-thumbnails JavaScript Library v0.5.0
 * https://www.npmjs.com/package/vite-plugin-lazy-thumbnails
 *
 * Date: 2025-07-28T09:18Z
 */
const path=require("path"),fs=require("fs/promises"),sharp=require("sharp"),THUMBNAIL_PREFIX="thumb_",RUNTIME_SCRIPT="\n  document.addEventListener('DOMContentLoaded', function() {\n    // 处理 <img> 标签\n\n    function loadOriginalImages() {\n      const images = document.querySelectorAll('img');\n\n      images.forEach(img => {\n        const src = img.src;\n        // 检查是否是缩略图路径\n        if (!src.includes('thumb_')) return;\n\n        // 已经加载过的不再处理\n        if (img.dataset.loaded === 'true') return;\n\n        // 计算原图路径（去掉 thumb_ 前缀）\n        const originalSrc = src.replace(new RegExp('thumb_', 'g'), '');\n\n        // 先记录缩略图的尺寸（在替换 src 前）\n        const thumbImg = new Image();\n        thumbImg.onload = () => {\n          const boxW = thumbImg.naturalWidth;\n          const boxH = thumbImg.naturalHeight;\n\n          // 保持缩略图占位尺寸\n          img.style.width = img.clientWidth + 'px';\n          img.style.height = img.clientHeight + 'px';\n\n          // 缓存检测\n          const cacheTest = new Image();\n          cacheTest.onload = () => {\n            // 缓存命中：直接替换\n            img.src = originalSrc;\n            img.dataset.loaded = 'true';\n          };\n          cacheTest.onerror = () => {\n            // 缓存未命中：走缩略图→原图过渡\n            const tempImg = new Image();\n            tempImg.onload = () => {\n              // 加载成功：先模糊，再替换成原图，再取消模糊\n              img.style.filter = 'blur(0px)';\n              img.src = originalSrc;\n              img.dataset.loaded = 'true';\n            };\n            tempImg.onerror = () => {\n              console.error('Failed to load image:', originalSrc);\n              img.style.filter = 'none';\n            };\n            tempImg.src = originalSrc;\n\n            // 添加过渡效果\n            img.style.transition = 'filter 0.2s ease';\n            img.style.filter = 'blur(2px)';\n          };\n          cacheTest.src = originalSrc; // 触发缓存检测\n        };\n        thumbImg.src = src; // 加载缩略图以获取尺寸\n      });\n    }\n\n    // 处理 CSS background-image\n    function loadOriginalBackgrounds() {\n      const elements = document.querySelectorAll('*');\n      elements.forEach(el => {\n        if (el.dataset.bgLoaded === 'true') return;\n\n        const bgImage = window.getComputedStyle(el).backgroundImage;\n        if (!bgImage.includes('thumb_')) return;\n\n        // 用正则把 url(...) 中的路径提出来\n        const urlMatch = bgImage.match(/url\\([\"']?(.*?)[\"']?\\)/i);\n        if (!urlMatch) return;\n\n        const thumbPath = urlMatch[1];\n        const originalBg = thumbPath.replace(new RegExp('thumb_'), '');\n\n        const tempImg = new Image();\n        tempImg.onload = function() {\n          // 替换背景图\n          el.style.backgroundImage = bgImage.replace(thumbPath, originalBg);\n          el.dataset.bgLoaded = 'true';\n        };\n        tempImg.onerror = function() {\n          console.error('Failed to load background image:', originalBg);\n        };\n        tempImg.src = originalBg;\n      });\n    }\n\n    // 页面初次加载\n    loadOriginalImages();\n    loadOriginalBackgrounds();\n\n    // 监听后续动态插入的 DOM\n    const observer = new MutationObserver(function(mutations) {\n      mutations.forEach(function(mutation) {\n        if (mutation.addedNodes.length) {\n          loadOriginalImages();\n          loadOriginalBackgrounds();\n        }\n      });\n    });\n    observer.observe(document.body, { childList: true, subtree: true });\n  });\n";function thumbnailLoading(n={}){const e={quality:30,width:128,skipSmallImages:!0,skipBackground:!0,minSizeToResize:30,blurAmount:3,transitionDuration:"0.3s",...n};return{name:"vite-plugin-image-thumbnail",async generateBundle(n,r){const a=[];for(const[n,t]of Object.entries(r))console.log("filename",n),/\.(jpg|png|jpeg|webp|avif|gif)$/i.test(n)&&a.push((async()=>{try{const r="asset"===t.type?t.source:await fs.readFile(t.fileName),a=r.length/1024;if(e.skipSmallImages&&a<=e.minSizeToResize)return;const i="thumb_"+path.basename(n),o=path.join(path.dirname(n),i),s=path.extname(n).slice(1).toLowerCase(),l=await sharp(r).resize(e.width).toFormat(s,{quality:e.quality}).toBuffer();this.emitFile({type:"asset",fileName:o,source:l})}catch(e){console.error(`Failed to generate thumbnail for ${n}:`,e)}})());if(!e.skipBackground)for(const[n,e]of Object.entries(r))if(n.endsWith(".css")&&"asset"===e.type){let n=e.source.toString();n=n.replace(/url\(["']?(.*?\.(?:jpg|png|jpeg|webp|avif|gif))["']?\)/gi,(n,e)=>`url("${t(e)}") center / cover no-repeat`),e.source=Buffer.from(n)}await Promise.all(a)},renderChunk(n){const e=require("@babel/parser"),r=require("@babel/traverse").default,a=require("magic-string").default||require("magic-string");let i;try{i=e.parse(n,{sourceType:"module"})}catch{return null}const o=new a(n);let s=!1;return r(i,{StringLiteral(n){const{value:e}=n.node;if(/\.(jpg|png|jpeg|webp|avif|gif)$/i.test(e)){const r=t(e);o.overwrite(n.node.start,n.node.end,JSON.stringify(r)),s=!0}}}),s?{code:o.toString(),map:o.generateMap({hires:!0})}:null},transformIndexHtml:n=>({html:n,tags:[{tag:"script",injectTo:"body",children:RUNTIME_SCRIPT.replace(/'blur\(2px\)'/,`'blur(${e.blurAmount}px)'`).replace(/0\.3s/g,e.transitionDuration)}]})};function t(n){const e=path.basename(n),t=path.dirname(n);return path.posix.join(t,"thumb_"+e).replace(/\\/g,"/")}}module.exports=thumbnailLoading;